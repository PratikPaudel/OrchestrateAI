# File: backend/app/agents/reviewer.py
import os
from langchain_core.prompts import ChatPromptTemplate
from pydantic import BaseModel, Field
from langchain_groq import ChatGroq
from typing import List
import time
import random

class Review(BaseModel):
    """A structured review of a summary's reliability and content."""
    critique: str = Field(description="Constructive critique of the summary, noting any bias or logical fallacies.")
    is_reliable: bool = Field(description="A boolean flag indicating if the source appears reliable.")
    verified_claims: List[str] = Field(description="A list of key claims from the summary that were checked.")

class ReviewerAgent:
    def __init__(self):
        # Use lighter model for reviewing to reduce rate limit pressure
        self.llm = ChatGroq(
            model_name="llama3-8b-8192",  # Changed to lighter model
            api_key=os.getenv("GROQ_API_KEY")
        )
        
        structured_llm = self.llm.with_structured_output(Review)
        
        system_prompt = (
            "You are a meticulous and skeptical Reviewer Agent. Your job is to "
            "critically evaluate a summary based on its content. Assess its reliability, "
            "check for bias, and identify key claims. Be objective and analytical."
        )
        
        self.prompt = ChatPromptTemplate.from_messages([
            ("system", system_prompt),
            ("human", "Please review the following summary:\n\nSummary:\n---\n{summary}\n---\nSource URL: {url}")
        ])
        
        self.chain = self.prompt | structured_llm
    
    def _review_with_retry(self, summary: str, url: str, max_attempts=5, base_wait=60, max_wait=300):
        """Review with retry logic for rate limiting."""
        attempt = 0
        while attempt < max_attempts:
            try:
                # Add delay before API call
                if attempt > 0:
                    time.sleep(3)  # 3 second delay between retries
                else:
                    time.sleep(2)  # 2 second delay for first attempt
                
                print(f"Reviewing summary (attempt {attempt + 1}/{max_attempts})...")
                return self.chain.invoke({"summary": summary, "url": url})
                
            except Exception as e:
                if "429" in str(e) or "rate limit" in str(e).lower():
                    wait_time = min(base_wait * (2 ** attempt), max_wait)
                    wait_time = wait_time + random.uniform(0, 10)  # Add jitter
                    print(f"Rate limit hit in reviewer. Waiting {wait_time:.1f} seconds before retrying...")
                    time.sleep(wait_time)
                    attempt += 1
                else:
                    print(f"Non-rate-limit error in reviewer: {e}")
                    raise
        
        raise Exception("Max retry attempts reached for reviewing.")
    
    def review(self, summary: str, url: str) -> Review:
        """
        Reviews a summary for bias, reliability, and key claims.
        
        Args:
            summary: The summary generated by the Summarizer Agent.
            url: The source URL for context.
            
        Returns:
            A Review object with the critique and reliability assessment.
        """
        return self._review_with_retry(summary, url)