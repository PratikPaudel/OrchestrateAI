# File: backend/app/agents/reviewer.py
import os
from pydantic import BaseModel, Field
import openai
from typing import List
import re
import time
import random

def retry_with_backoff(func, max_retries=3):
    for attempt in range(max_retries):
        try:
            return func()
        except Exception as e:
            if "429" in str(e):
                delay = (2 ** attempt) + random.uniform(0, 1)
                print(f"Rate limit hit, waiting {delay:.1f} seconds...")
                time.sleep(delay)
            else:
                raise

class Review(BaseModel):
    """A structured review of a summary's reliability and content."""
    critique: str = Field(description="Constructive critique of the summary, noting any bias or logical fallacies.")
    is_reliable: bool = Field(description="A boolean flag indicating if the source appears reliable.")
    verified_claims: List[str] = Field(description="A list of key claims from the summary that were checked.")

class ReviewerAgent:
    def __init__(self):
        # Use OpenAI for reviewing
        openai.api_key = os.getenv("OPENAI_API_KEY")
        self.client = openai.OpenAI()
        
        self.system_prompt = (
            "You are a meticulous and skeptical Reviewer Agent. Your job is to "
            "critically evaluate a summary based on its content. Assess its reliability, "
            "check for bias, and identify key claims. Be objective and analytical.\n\n"
            "Respond in the following format:\n"
            "RELIABLE: [YES/NO]\n"
            "CRITIQUE: [Your detailed critique]\n"
            "CLAIMS: [List of key claims, separated by commas]"
        )
    
    def _review_with_retry(self, summary: str, url: str, max_attempts=3):
        """Review with retry logic."""
        print(f"Reviewing summary...")
        
        prompt = f"{self.system_prompt}\n\nPlease review the following summary:\n\nSummary:\n---\n{summary}\n---\nSource URL: {url}"
        
        def make_request():
            return self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500
            )
        
        response = retry_with_backoff(make_request)
        time.sleep(2)  # Increased delay to respect rate limits
        return self._parse_review_response(response.choices[0].message.content)
    
    def _parse_review_response(self, response_text: str) -> Review:
        """Parse the text response into a Review object."""
        # Default values
        is_reliable = False
        critique = "Unable to parse review response"
        verified_claims = []
        
        try:
            # Extract RELIABLE field
            reliable_match = re.search(r'RELIABLE:\s*(YES|NO)', response_text, re.IGNORECASE)
            if reliable_match:
                is_reliable = reliable_match.group(1).upper() == 'YES'
            
            # Extract CRITIQUE field
            critique_match = re.search(r'CRITIQUE:\s*(.*?)(?=\nCLAIMS:|$)', response_text, re.DOTALL | re.IGNORECASE)
            if critique_match:
                critique = critique_match.group(1).strip()
            
            # Extract CLAIMS field
            claims_match = re.search(r'CLAIMS:\s*(.*?)(?=\n|$)', response_text, re.DOTALL | re.IGNORECASE)
            if claims_match:
                claims_text = claims_match.group(1).strip()
                verified_claims = [claim.strip() for claim in claims_text.split(',') if claim.strip()]
            
        except Exception as e:
            print(f"Error parsing review response: {e}")
            critique = f"Error parsing review: {e}"
        
        return Review(
            critique=critique,
            is_reliable=is_reliable,
            verified_claims=verified_claims
        )
    
    def review(self, summary: str, url: str) -> Review:
        """
        Reviews a summary for bias, reliability, and key claims.
        
        Args:
            summary: The summary generated by the Summarizer Agent.
            url: The source URL for context.
            
        Returns:
            A Review object with the critique and reliability assessment.
        """
        return self._review_with_retry(summary, url)